@use 'sass:map';
@use "converters" as convert;
@use "color" as color;
@use '../namespace' as ns;

$border-types: [solid, dashed];
$border-width: (
  default: convert.value-to-rem(1px),
  big: convert.value-to-rem(2px),
  bigger: convert.value-to-rem(4px),
  biggest: convert.value-to-rem(6px),
);

@function get-border($color: primary, $type: solid, $width: default) {
  @return map.get($border-width, $width) color.get-color($color, default) $type;
}

@mixin add-border($color: primary, $type: solid, $width: default) {
  border: get-border($color, $type, $width);
}

@mixin add-default-focus-outline() {
  &:focus {
    outline: get-border(black, solid, big);
  }

  /* stylelint-disable a11y/no-outline-none */
  &:focus:not(:focus-visible) {
    outline: 0;
    box-shadow: none;
  }
  /* stylelint-enable a11y/no-outline-none */

  &:focus-visible:focus:not(:focus-visible) {
    outline: get-border(black, solid, big);
  }
}

@mixin generate-border-styles() {
  @each $border-type in $border-types {
    @each $color-type, $_unused in color.$color-data {
      .#{ns.$prefix}-border-#{$border-type}-#{$color-type + ""} {
        @include add-border($color-type, $border-type);
      }

      // TODO: Iterate over deeper colors
    }
  }
}
